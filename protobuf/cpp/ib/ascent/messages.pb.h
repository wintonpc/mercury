// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ib/ascent/messages.proto

#ifndef PROTOBUF_ib_2fascent_2fmessages_2eproto__INCLUDED
#define PROTOBUF_ib_2fascent_2fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ib {
namespace ascent {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ib_2fascent_2fmessages_2eproto();
void protobuf_AssignDesc_ib_2fascent_2fmessages_2eproto();
void protobuf_ShutdownFile_ib_2fascent_2fmessages_2eproto();

class ConvertRequest;
class ConvertNotification;

// ===================================================================

class ConvertRequest : public ::google::protobuf::Message {
 public:
  ConvertRequest();
  virtual ~ConvertRequest();

  ConvertRequest(const ConvertRequest& from);

  inline ConvertRequest& operator=(const ConvertRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvertRequest& default_instance();

  void Swap(ConvertRequest* other);

  // implements Message ----------------------------------------------

  ConvertRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvertRequest& from);
  void MergeFrom(const ConvertRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sample_path = 1;
  inline bool has_sample_path() const;
  inline void clear_sample_path();
  static const int kSamplePathFieldNumber = 1;
  inline const ::std::string& sample_path() const;
  inline void set_sample_path(const ::std::string& value);
  inline void set_sample_path(const char* value);
  inline void set_sample_path(const char* value, size_t size);
  inline ::std::string* mutable_sample_path();
  inline ::std::string* release_sample_path();
  inline void set_allocated_sample_path(::std::string* sample_path);

  // required string customer = 2;
  inline bool has_customer() const;
  inline void clear_customer();
  static const int kCustomerFieldNumber = 2;
  inline const ::std::string& customer() const;
  inline void set_customer(const ::std::string& value);
  inline void set_customer(const char* value);
  inline void set_customer(const char* value, size_t size);
  inline ::std::string* mutable_customer();
  inline ::std::string* release_customer();
  inline void set_allocated_customer(::std::string* customer);

  // required string batch_id = 3;
  inline bool has_batch_id() const;
  inline void clear_batch_id();
  static const int kBatchIdFieldNumber = 3;
  inline const ::std::string& batch_id() const;
  inline void set_batch_id(const ::std::string& value);
  inline void set_batch_id(const char* value);
  inline void set_batch_id(const char* value, size_t size);
  inline ::std::string* mutable_batch_id();
  inline ::std::string* release_batch_id();
  inline void set_allocated_batch_id(::std::string* batch_id);

  // required string unique_sample_id = 4;
  inline bool has_unique_sample_id() const;
  inline void clear_unique_sample_id();
  static const int kUniqueSampleIdFieldNumber = 4;
  inline const ::std::string& unique_sample_id() const;
  inline void set_unique_sample_id(const ::std::string& value);
  inline void set_unique_sample_id(const char* value);
  inline void set_unique_sample_id(const char* value, size_t size);
  inline ::std::string* mutable_unique_sample_id();
  inline ::std::string* release_unique_sample_id();
  inline void set_allocated_unique_sample_id(::std::string* unique_sample_id);

  // @@protoc_insertion_point(class_scope:ib.ascent.ConvertRequest)
 private:
  inline void set_has_sample_path();
  inline void clear_has_sample_path();
  inline void set_has_customer();
  inline void clear_has_customer();
  inline void set_has_batch_id();
  inline void clear_has_batch_id();
  inline void set_has_unique_sample_id();
  inline void clear_has_unique_sample_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sample_path_;
  ::std::string* customer_;
  ::std::string* batch_id_;
  ::std::string* unique_sample_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ib_2fascent_2fmessages_2eproto();
  friend void protobuf_AssignDesc_ib_2fascent_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_ib_2fascent_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ConvertRequest* default_instance_;
};
// -------------------------------------------------------------------

class ConvertNotification : public ::google::protobuf::Message {
 public:
  ConvertNotification();
  virtual ~ConvertNotification();

  ConvertNotification(const ConvertNotification& from);

  inline ConvertNotification& operator=(const ConvertNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvertNotification& default_instance();

  void Swap(ConvertNotification* other);

  // implements Message ----------------------------------------------

  ConvertNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvertNotification& from);
  void MergeFrom(const ConvertNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // optional string error_message = 2;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // required string hostname = 3;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // required .ib.ascent.ConvertRequest request = 4;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 4;
  inline const ::ib::ascent::ConvertRequest& request() const;
  inline ::ib::ascent::ConvertRequest* mutable_request();
  inline ::ib::ascent::ConvertRequest* release_request();
  inline void set_allocated_request(::ib::ascent::ConvertRequest* request);

  // @@protoc_insertion_point(class_scope:ib.ascent.ConvertNotification)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_error_message();
  inline void clear_has_error_message();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_request();
  inline void clear_has_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* error_message_;
  ::std::string* hostname_;
  ::ib::ascent::ConvertRequest* request_;
  bool succeeded_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ib_2fascent_2fmessages_2eproto();
  friend void protobuf_AssignDesc_ib_2fascent_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_ib_2fascent_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ConvertNotification* default_instance_;
};
// ===================================================================


// ===================================================================

// ConvertRequest

// required string sample_path = 1;
inline bool ConvertRequest::has_sample_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvertRequest::set_has_sample_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvertRequest::clear_has_sample_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvertRequest::clear_sample_path() {
  if (sample_path_ != &::google::protobuf::internal::kEmptyString) {
    sample_path_->clear();
  }
  clear_has_sample_path();
}
inline const ::std::string& ConvertRequest::sample_path() const {
  return *sample_path_;
}
inline void ConvertRequest::set_sample_path(const ::std::string& value) {
  set_has_sample_path();
  if (sample_path_ == &::google::protobuf::internal::kEmptyString) {
    sample_path_ = new ::std::string;
  }
  sample_path_->assign(value);
}
inline void ConvertRequest::set_sample_path(const char* value) {
  set_has_sample_path();
  if (sample_path_ == &::google::protobuf::internal::kEmptyString) {
    sample_path_ = new ::std::string;
  }
  sample_path_->assign(value);
}
inline void ConvertRequest::set_sample_path(const char* value, size_t size) {
  set_has_sample_path();
  if (sample_path_ == &::google::protobuf::internal::kEmptyString) {
    sample_path_ = new ::std::string;
  }
  sample_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConvertRequest::mutable_sample_path() {
  set_has_sample_path();
  if (sample_path_ == &::google::protobuf::internal::kEmptyString) {
    sample_path_ = new ::std::string;
  }
  return sample_path_;
}
inline ::std::string* ConvertRequest::release_sample_path() {
  clear_has_sample_path();
  if (sample_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sample_path_;
    sample_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConvertRequest::set_allocated_sample_path(::std::string* sample_path) {
  if (sample_path_ != &::google::protobuf::internal::kEmptyString) {
    delete sample_path_;
  }
  if (sample_path) {
    set_has_sample_path();
    sample_path_ = sample_path;
  } else {
    clear_has_sample_path();
    sample_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string customer = 2;
inline bool ConvertRequest::has_customer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvertRequest::set_has_customer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvertRequest::clear_has_customer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvertRequest::clear_customer() {
  if (customer_ != &::google::protobuf::internal::kEmptyString) {
    customer_->clear();
  }
  clear_has_customer();
}
inline const ::std::string& ConvertRequest::customer() const {
  return *customer_;
}
inline void ConvertRequest::set_customer(const ::std::string& value) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  customer_->assign(value);
}
inline void ConvertRequest::set_customer(const char* value) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  customer_->assign(value);
}
inline void ConvertRequest::set_customer(const char* value, size_t size) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  customer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConvertRequest::mutable_customer() {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  return customer_;
}
inline ::std::string* ConvertRequest::release_customer() {
  clear_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customer_;
    customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConvertRequest::set_allocated_customer(::std::string* customer) {
  if (customer_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_;
  }
  if (customer) {
    set_has_customer();
    customer_ = customer;
  } else {
    clear_has_customer();
    customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string batch_id = 3;
inline bool ConvertRequest::has_batch_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvertRequest::set_has_batch_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvertRequest::clear_has_batch_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvertRequest::clear_batch_id() {
  if (batch_id_ != &::google::protobuf::internal::kEmptyString) {
    batch_id_->clear();
  }
  clear_has_batch_id();
}
inline const ::std::string& ConvertRequest::batch_id() const {
  return *batch_id_;
}
inline void ConvertRequest::set_batch_id(const ::std::string& value) {
  set_has_batch_id();
  if (batch_id_ == &::google::protobuf::internal::kEmptyString) {
    batch_id_ = new ::std::string;
  }
  batch_id_->assign(value);
}
inline void ConvertRequest::set_batch_id(const char* value) {
  set_has_batch_id();
  if (batch_id_ == &::google::protobuf::internal::kEmptyString) {
    batch_id_ = new ::std::string;
  }
  batch_id_->assign(value);
}
inline void ConvertRequest::set_batch_id(const char* value, size_t size) {
  set_has_batch_id();
  if (batch_id_ == &::google::protobuf::internal::kEmptyString) {
    batch_id_ = new ::std::string;
  }
  batch_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConvertRequest::mutable_batch_id() {
  set_has_batch_id();
  if (batch_id_ == &::google::protobuf::internal::kEmptyString) {
    batch_id_ = new ::std::string;
  }
  return batch_id_;
}
inline ::std::string* ConvertRequest::release_batch_id() {
  clear_has_batch_id();
  if (batch_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = batch_id_;
    batch_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConvertRequest::set_allocated_batch_id(::std::string* batch_id) {
  if (batch_id_ != &::google::protobuf::internal::kEmptyString) {
    delete batch_id_;
  }
  if (batch_id) {
    set_has_batch_id();
    batch_id_ = batch_id;
  } else {
    clear_has_batch_id();
    batch_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string unique_sample_id = 4;
inline bool ConvertRequest::has_unique_sample_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvertRequest::set_has_unique_sample_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvertRequest::clear_has_unique_sample_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvertRequest::clear_unique_sample_id() {
  if (unique_sample_id_ != &::google::protobuf::internal::kEmptyString) {
    unique_sample_id_->clear();
  }
  clear_has_unique_sample_id();
}
inline const ::std::string& ConvertRequest::unique_sample_id() const {
  return *unique_sample_id_;
}
inline void ConvertRequest::set_unique_sample_id(const ::std::string& value) {
  set_has_unique_sample_id();
  if (unique_sample_id_ == &::google::protobuf::internal::kEmptyString) {
    unique_sample_id_ = new ::std::string;
  }
  unique_sample_id_->assign(value);
}
inline void ConvertRequest::set_unique_sample_id(const char* value) {
  set_has_unique_sample_id();
  if (unique_sample_id_ == &::google::protobuf::internal::kEmptyString) {
    unique_sample_id_ = new ::std::string;
  }
  unique_sample_id_->assign(value);
}
inline void ConvertRequest::set_unique_sample_id(const char* value, size_t size) {
  set_has_unique_sample_id();
  if (unique_sample_id_ == &::google::protobuf::internal::kEmptyString) {
    unique_sample_id_ = new ::std::string;
  }
  unique_sample_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConvertRequest::mutable_unique_sample_id() {
  set_has_unique_sample_id();
  if (unique_sample_id_ == &::google::protobuf::internal::kEmptyString) {
    unique_sample_id_ = new ::std::string;
  }
  return unique_sample_id_;
}
inline ::std::string* ConvertRequest::release_unique_sample_id() {
  clear_has_unique_sample_id();
  if (unique_sample_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unique_sample_id_;
    unique_sample_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConvertRequest::set_allocated_unique_sample_id(::std::string* unique_sample_id) {
  if (unique_sample_id_ != &::google::protobuf::internal::kEmptyString) {
    delete unique_sample_id_;
  }
  if (unique_sample_id) {
    set_has_unique_sample_id();
    unique_sample_id_ = unique_sample_id;
  } else {
    clear_has_unique_sample_id();
    unique_sample_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ConvertNotification

// required bool succeeded = 1;
inline bool ConvertNotification::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvertNotification::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvertNotification::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvertNotification::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool ConvertNotification::succeeded() const {
  return succeeded_;
}
inline void ConvertNotification::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
}

// optional string error_message = 2;
inline bool ConvertNotification::has_error_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvertNotification::set_has_error_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvertNotification::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvertNotification::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& ConvertNotification::error_message() const {
  return *error_message_;
}
inline void ConvertNotification::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void ConvertNotification::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void ConvertNotification::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConvertNotification::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* ConvertNotification::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConvertNotification::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string hostname = 3;
inline bool ConvertNotification::has_hostname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvertNotification::set_has_hostname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvertNotification::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvertNotification::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& ConvertNotification::hostname() const {
  return *hostname_;
}
inline void ConvertNotification::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void ConvertNotification::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void ConvertNotification::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConvertNotification::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* ConvertNotification::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConvertNotification::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .ib.ascent.ConvertRequest request = 4;
inline bool ConvertNotification::has_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvertNotification::set_has_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvertNotification::clear_has_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvertNotification::clear_request() {
  if (request_ != NULL) request_->::ib::ascent::ConvertRequest::Clear();
  clear_has_request();
}
inline const ::ib::ascent::ConvertRequest& ConvertNotification::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::ib::ascent::ConvertRequest* ConvertNotification::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::ib::ascent::ConvertRequest;
  return request_;
}
inline ::ib::ascent::ConvertRequest* ConvertNotification::release_request() {
  clear_has_request();
  ::ib::ascent::ConvertRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void ConvertNotification::set_allocated_request(::ib::ascent::ConvertRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ascent
}  // namespace ib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ib_2fascent_2fmessages_2eproto__INCLUDED
