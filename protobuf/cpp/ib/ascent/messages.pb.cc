// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ib/ascent/messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ib/ascent/messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ib {
namespace ascent {

namespace {

const ::google::protobuf::Descriptor* ConvertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvertNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvertNotification_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ib_2fascent_2fmessages_2eproto() {
  protobuf_AddDesc_ib_2fascent_2fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ib/ascent/messages.proto");
  GOOGLE_CHECK(file != NULL);
  ConvertRequest_descriptor_ = file->message_type(0);
  static const int ConvertRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertRequest, sample_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertRequest, customer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertRequest, batch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertRequest, unique_sample_id_),
  };
  ConvertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvertRequest_descriptor_,
      ConvertRequest::default_instance_,
      ConvertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvertRequest));
  ConvertNotification_descriptor_ = file->message_type(1);
  static const int ConvertNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertNotification, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertNotification, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertNotification, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertNotification, request_),
  };
  ConvertNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvertNotification_descriptor_,
      ConvertNotification::default_instance_,
      ConvertNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvertNotification));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ib_2fascent_2fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvertRequest_descriptor_, &ConvertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvertNotification_descriptor_, &ConvertNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ib_2fascent_2fmessages_2eproto() {
  delete ConvertRequest::default_instance_;
  delete ConvertRequest_reflection_;
  delete ConvertNotification::default_instance_;
  delete ConvertNotification_reflection_;
}

void protobuf_AddDesc_ib_2fascent_2fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ib/ascent/messages.proto\022\tib.ascent\"c\n"
    "\016ConvertRequest\022\023\n\013sample_path\030\001 \002(\t\022\020\n\010"
    "customer\030\002 \002(\t\022\020\n\010batch_id\030\003 \002(\t\022\030\n\020uniq"
    "ue_sample_id\030\004 \002(\t\"}\n\023ConvertNotificatio"
    "n\022\021\n\tsucceeded\030\001 \002(\010\022\025\n\rerror_message\030\002 "
    "\001(\t\022\020\n\010hostname\030\003 \002(\t\022*\n\007request\030\004 \002(\0132\031"
    ".ib.ascent.ConvertRequest", 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ib/ascent/messages.proto", &protobuf_RegisterTypes);
  ConvertRequest::default_instance_ = new ConvertRequest();
  ConvertNotification::default_instance_ = new ConvertNotification();
  ConvertRequest::default_instance_->InitAsDefaultInstance();
  ConvertNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ib_2fascent_2fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ib_2fascent_2fmessages_2eproto {
  StaticDescriptorInitializer_ib_2fascent_2fmessages_2eproto() {
    protobuf_AddDesc_ib_2fascent_2fmessages_2eproto();
  }
} static_descriptor_initializer_ib_2fascent_2fmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ConvertRequest::kSamplePathFieldNumber;
const int ConvertRequest::kCustomerFieldNumber;
const int ConvertRequest::kBatchIdFieldNumber;
const int ConvertRequest::kUniqueSampleIdFieldNumber;
#endif  // !_MSC_VER

ConvertRequest::ConvertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvertRequest::InitAsDefaultInstance() {
}

ConvertRequest::ConvertRequest(const ConvertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvertRequest::SharedCtor() {
  _cached_size_ = 0;
  sample_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  batch_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unique_sample_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvertRequest::~ConvertRequest() {
  SharedDtor();
}

void ConvertRequest::SharedDtor() {
  if (sample_path_ != &::google::protobuf::internal::kEmptyString) {
    delete sample_path_;
  }
  if (customer_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_;
  }
  if (batch_id_ != &::google::protobuf::internal::kEmptyString) {
    delete batch_id_;
  }
  if (unique_sample_id_ != &::google::protobuf::internal::kEmptyString) {
    delete unique_sample_id_;
  }
  if (this != default_instance_) {
  }
}

void ConvertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvertRequest_descriptor_;
}

const ConvertRequest& ConvertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ib_2fascent_2fmessages_2eproto();
  return *default_instance_;
}

ConvertRequest* ConvertRequest::default_instance_ = NULL;

ConvertRequest* ConvertRequest::New() const {
  return new ConvertRequest;
}

void ConvertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sample_path()) {
      if (sample_path_ != &::google::protobuf::internal::kEmptyString) {
        sample_path_->clear();
      }
    }
    if (has_customer()) {
      if (customer_ != &::google::protobuf::internal::kEmptyString) {
        customer_->clear();
      }
    }
    if (has_batch_id()) {
      if (batch_id_ != &::google::protobuf::internal::kEmptyString) {
        batch_id_->clear();
      }
    }
    if (has_unique_sample_id()) {
      if (unique_sample_id_ != &::google::protobuf::internal::kEmptyString) {
        unique_sample_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sample_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sample_path().data(), this->sample_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_customer;
        break;
      }

      // required string customer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer().data(), this->customer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_batch_id;
        break;
      }

      // required string batch_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_id().data(), this->batch_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unique_sample_id;
        break;
      }

      // required string unique_sample_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unique_sample_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_sample_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unique_sample_id().data(), this->unique_sample_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConvertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sample_path = 1;
  if (has_sample_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sample_path().data(), this->sample_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sample_path(), output);
  }

  // required string customer = 2;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer().data(), this->customer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->customer(), output);
  }

  // required string batch_id = 3;
  if (has_batch_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_id().data(), this->batch_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->batch_id(), output);
  }

  // required string unique_sample_id = 4;
  if (has_unique_sample_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unique_sample_id().data(), this->unique_sample_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unique_sample_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sample_path = 1;
  if (has_sample_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sample_path().data(), this->sample_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sample_path(), target);
  }

  // required string customer = 2;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer().data(), this->customer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->customer(), target);
  }

  // required string batch_id = 3;
  if (has_batch_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_id().data(), this->batch_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->batch_id(), target);
  }

  // required string unique_sample_id = 4;
  if (has_unique_sample_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unique_sample_id().data(), this->unique_sample_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unique_sample_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sample_path = 1;
    if (has_sample_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sample_path());
    }

    // required string customer = 2;
    if (has_customer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer());
    }

    // required string batch_id = 3;
    if (has_batch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->batch_id());
    }

    // required string unique_sample_id = 4;
    if (has_unique_sample_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unique_sample_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvertRequest::MergeFrom(const ConvertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sample_path()) {
      set_sample_path(from.sample_path());
    }
    if (from.has_customer()) {
      set_customer(from.customer());
    }
    if (from.has_batch_id()) {
      set_batch_id(from.batch_id());
    }
    if (from.has_unique_sample_id()) {
      set_unique_sample_id(from.unique_sample_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertRequest::CopyFrom(const ConvertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ConvertRequest::Swap(ConvertRequest* other) {
  if (other != this) {
    std::swap(sample_path_, other->sample_path_);
    std::swap(customer_, other->customer_);
    std::swap(batch_id_, other->batch_id_);
    std::swap(unique_sample_id_, other->unique_sample_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvertRequest_descriptor_;
  metadata.reflection = ConvertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConvertNotification::kSucceededFieldNumber;
const int ConvertNotification::kErrorMessageFieldNumber;
const int ConvertNotification::kHostnameFieldNumber;
const int ConvertNotification::kRequestFieldNumber;
#endif  // !_MSC_VER

ConvertNotification::ConvertNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvertNotification::InitAsDefaultInstance() {
  request_ = const_cast< ::ib::ascent::ConvertRequest*>(&::ib::ascent::ConvertRequest::default_instance());
}

ConvertNotification::ConvertNotification(const ConvertNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvertNotification::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvertNotification::~ConvertNotification() {
  SharedDtor();
}

void ConvertNotification::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete request_;
  }
}

void ConvertNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvertNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvertNotification_descriptor_;
}

const ConvertNotification& ConvertNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ib_2fascent_2fmessages_2eproto();
  return *default_instance_;
}

ConvertNotification* ConvertNotification::default_instance_ = NULL;

ConvertNotification* ConvertNotification::New() const {
  return new ConvertNotification;
}

void ConvertNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    succeeded_ = false;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_request()) {
      if (request_ != NULL) request_->::ib::ascent::ConvertRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvertNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool succeeded = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hostname;
        break;
      }

      // required string hostname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request;
        break;
      }

      // required .ib.ascent.ConvertRequest request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConvertNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_message(), output);
  }

  // required string hostname = 3;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hostname(), output);
  }

  // required .ib.ascent.ConvertRequest request = 4;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvertNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // required string hostname = 3;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // required .ib.ascent.ConvertRequest request = 4;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvertNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // required string hostname = 3;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // required .ib.ascent.ConvertRequest request = 4;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvertNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvertNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvertNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvertNotification::MergeFrom(const ConvertNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_request()) {
      mutable_request()->::ib::ascent::ConvertRequest::MergeFrom(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvertNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertNotification::CopyFrom(const ConvertNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  return true;
}

void ConvertNotification::Swap(ConvertNotification* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(error_message_, other->error_message_);
    std::swap(hostname_, other->hostname_);
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvertNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvertNotification_descriptor_;
  metadata.reflection = ConvertNotification_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ascent
}  // namespace ib

// @@protoc_insertion_point(global_scope)
